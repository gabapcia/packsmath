// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/gabapcia/packsmath/internal/order"
	"sync"
)

// Ensure, that PackStorageMock does implement order.PackStorage.
// If this is not the case, regenerate this file with moq.
var _ order.PackStorage = &PackStorageMock{}

// PackStorageMock is a mock implementation of order.PackStorage.
//
//	func TestSomethingThatUsesPackStorage(t *testing.T) {
//
//		// make and configure a mocked order.PackStorage
//		mockedPackStorage := &PackStorageMock{
//			ListPackSizesFunc: func(ctx context.Context) ([]int, error) {
//				panic("mock out the ListPackSizes method")
//			},
//		}
//
//		// use mockedPackStorage in code that requires order.PackStorage
//		// and then make assertions.
//
//	}
type PackStorageMock struct {
	// ListPackSizesFunc mocks the ListPackSizes method.
	ListPackSizesFunc func(ctx context.Context) ([]int, error)

	// calls tracks calls to the methods.
	calls struct {
		// ListPackSizes holds details about calls to the ListPackSizes method.
		ListPackSizes []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockListPackSizes sync.RWMutex
}

// ListPackSizes calls ListPackSizesFunc.
func (mock *PackStorageMock) ListPackSizes(ctx context.Context) ([]int, error) {
	if mock.ListPackSizesFunc == nil {
		panic("PackStorageMock.ListPackSizesFunc: method is nil but PackStorage.ListPackSizes was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockListPackSizes.Lock()
	mock.calls.ListPackSizes = append(mock.calls.ListPackSizes, callInfo)
	mock.lockListPackSizes.Unlock()
	return mock.ListPackSizesFunc(ctx)
}

// ListPackSizesCalls gets all the calls that were made to ListPackSizes.
// Check the length with:
//
//	len(mockedPackStorage.ListPackSizesCalls())
func (mock *PackStorageMock) ListPackSizesCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockListPackSizes.RLock()
	calls = mock.calls.ListPackSizes
	mock.lockListPackSizes.RUnlock()
	return calls
}
