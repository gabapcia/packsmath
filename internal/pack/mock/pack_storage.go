// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/gabapcia/packsmath/internal/pack"
	"sync"
)

// Ensure, that PackStorageMock does implement pack.PackStorage.
// If this is not the case, regenerate this file with moq.
var _ pack.PackStorage = &PackStorageMock{}

// PackStorageMock is a mock implementation of pack.PackStorage.
//
//	func TestSomethingThatUsesPackStorage(t *testing.T) {
//
//		// make and configure a mocked pack.PackStorage
//		mockedPackStorage := &PackStorageMock{
//			DeletePackSizeFunc: func(ctx context.Context, size int) error {
//				panic("mock out the DeletePackSize method")
//			},
//			RegisterPackSizeFunc: func(ctx context.Context, size int) error {
//				panic("mock out the RegisterPackSize method")
//			},
//		}
//
//		// use mockedPackStorage in code that requires pack.PackStorage
//		// and then make assertions.
//
//	}
type PackStorageMock struct {
	// DeletePackSizeFunc mocks the DeletePackSize method.
	DeletePackSizeFunc func(ctx context.Context, size int) error

	// RegisterPackSizeFunc mocks the RegisterPackSize method.
	RegisterPackSizeFunc func(ctx context.Context, size int) error

	// calls tracks calls to the methods.
	calls struct {
		// DeletePackSize holds details about calls to the DeletePackSize method.
		DeletePackSize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Size is the size argument value.
			Size int
		}
		// RegisterPackSize holds details about calls to the RegisterPackSize method.
		RegisterPackSize []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Size is the size argument value.
			Size int
		}
	}
	lockDeletePackSize   sync.RWMutex
	lockRegisterPackSize sync.RWMutex
}

// DeletePackSize calls DeletePackSizeFunc.
func (mock *PackStorageMock) DeletePackSize(ctx context.Context, size int) error {
	if mock.DeletePackSizeFunc == nil {
		panic("PackStorageMock.DeletePackSizeFunc: method is nil but PackStorage.DeletePackSize was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Size int
	}{
		Ctx:  ctx,
		Size: size,
	}
	mock.lockDeletePackSize.Lock()
	mock.calls.DeletePackSize = append(mock.calls.DeletePackSize, callInfo)
	mock.lockDeletePackSize.Unlock()
	return mock.DeletePackSizeFunc(ctx, size)
}

// DeletePackSizeCalls gets all the calls that were made to DeletePackSize.
// Check the length with:
//
//	len(mockedPackStorage.DeletePackSizeCalls())
func (mock *PackStorageMock) DeletePackSizeCalls() []struct {
	Ctx  context.Context
	Size int
} {
	var calls []struct {
		Ctx  context.Context
		Size int
	}
	mock.lockDeletePackSize.RLock()
	calls = mock.calls.DeletePackSize
	mock.lockDeletePackSize.RUnlock()
	return calls
}

// RegisterPackSize calls RegisterPackSizeFunc.
func (mock *PackStorageMock) RegisterPackSize(ctx context.Context, size int) error {
	if mock.RegisterPackSizeFunc == nil {
		panic("PackStorageMock.RegisterPackSizeFunc: method is nil but PackStorage.RegisterPackSize was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Size int
	}{
		Ctx:  ctx,
		Size: size,
	}
	mock.lockRegisterPackSize.Lock()
	mock.calls.RegisterPackSize = append(mock.calls.RegisterPackSize, callInfo)
	mock.lockRegisterPackSize.Unlock()
	return mock.RegisterPackSizeFunc(ctx, size)
}

// RegisterPackSizeCalls gets all the calls that were made to RegisterPackSize.
// Check the length with:
//
//	len(mockedPackStorage.RegisterPackSizeCalls())
func (mock *PackStorageMock) RegisterPackSizeCalls() []struct {
	Ctx  context.Context
	Size int
} {
	var calls []struct {
		Ctx  context.Context
		Size int
	}
	mock.lockRegisterPackSize.RLock()
	calls = mock.calls.RegisterPackSize
	mock.lockRegisterPackSize.RUnlock()
	return calls
}
